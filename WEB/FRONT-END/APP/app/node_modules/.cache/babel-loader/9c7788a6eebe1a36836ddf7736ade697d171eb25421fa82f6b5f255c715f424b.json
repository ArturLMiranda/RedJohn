{"ast":null,"code":"import axios from 'axios';\nexport const EditarAtividade = async (atividadeId, titulo, descricao, demandante, responsaveis, validade, status) => {\n  // Validação de ID de atividade\n  if (!atividadeId) {\n    console.log(\"ID da atividade não encontrado.\");\n    return;\n  }\n\n  // Validação de campos obrigatórios\n  if (!titulo || !descricao || !validade || !status) {\n    console.error(\"Campos obrigatórios estão faltando.\");\n    return;\n  }\n\n  // Validação de data\n  const isDataValida = !isNaN(Date.parse(validade));\n  if (!isDataValida) {\n    console.error(\"Data de validade inválida:\", validade);\n    return;\n  }\n\n  // Garantir tipos corretos e ausência de confusão entre campos\n  const dadosAtualizados = {\n    titulo: String(titulo).trim(),\n    descricao: String(descricao).trim(),\n    demandante: parseInt(demandante),\n    // Certifique-se de que `demandante` é um número inteiro\n    responsaveis: Array.isArray(responsaveis) ? responsaveis.map(id => parseInt(id)) // Garante que todos os IDs de responsáveis sejam inteiros\n    : [parseInt(responsaveis)],\n    // Se não for array, transforma em um array com o ID único\n    validade,\n    // A data permanece como está (no formato ISO)\n    status: String(status).trim() // Garantir que status seja string sem espaços extras\n  };\n\n  // Verifica se todos os campos necessários estão válidos\n  if (isNaN(dadosAtualizados.demandante)) {\n    console.error(\"O campo 'demandante' deve ser um número válido.\");\n    return;\n  }\n  if (dadosAtualizados.responsaveis.some(id => isNaN(id))) {\n    console.error(\"Algum 'responsável' possui um ID inválido.\");\n    return;\n  }\n\n  // Envia a requisição para editar a atividade\n  try {\n    console.log(\"Payload enviado:\", dadosAtualizados);\n    const response = await axios.put(`http://localhost:8000/api/atividades/${atividadeId}/editar/`, dadosAtualizados, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(\"Atividade editada com sucesso:\", response.data);\n  } catch (error) {\n    console.error(\"Erro ao editar atividade:\", error);\n\n    // Verifica se a resposta de erro contém dados\n    if (error.response && error.response.data) {\n      console.error(\"Detalhes do erro:\", error.response.data);\n    } else {\n      console.error(\"Erro desconhecido:\", error.message);\n    }\n  }\n};\n_c = EditarAtividade;\nexport default EditarAtividade;\nvar _c;\n$RefreshReg$(_c, \"EditarAtividade\");","map":{"version":3,"names":["axios","EditarAtividade","atividadeId","titulo","descricao","demandante","responsaveis","validade","status","console","log","error","isDataValida","isNaN","Date","parse","dadosAtualizados","String","trim","parseInt","Array","isArray","map","id","some","response","put","headers","data","message","_c","$RefreshReg$"],"sources":["C:/Users/SAMSUNG/Desktop/ONEX/RedJohn/WEB/FRONT-END/APP/app/src/componentes/utils/home/EditarAtividade.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const EditarAtividade = async (atividadeId, titulo, descricao, demandante, responsaveis, validade, status) => {\r\n    // Validação de ID de atividade\r\n    if (!atividadeId) {\r\n        console.log(\"ID da atividade não encontrado.\");\r\n        return;\r\n    }\r\n\r\n    // Validação de campos obrigatórios\r\n    if (!titulo || !descricao || !validade || !status) {\r\n        console.error(\"Campos obrigatórios estão faltando.\");\r\n        return;\r\n    }\r\n\r\n    // Validação de data\r\n    const isDataValida = !isNaN(Date.parse(validade));\r\n    if (!isDataValida) {\r\n        console.error(\"Data de validade inválida:\", validade);\r\n        return;\r\n    }\r\n\r\n    // Garantir tipos corretos e ausência de confusão entre campos\r\n    const dadosAtualizados = {\r\n        titulo: String(titulo).trim(),\r\n        descricao: String(descricao).trim(),\r\n        demandante: parseInt(demandante), // Certifique-se de que `demandante` é um número inteiro\r\n        responsaveis: Array.isArray(responsaveis)\r\n            ? responsaveis.map(id => parseInt(id)) // Garante que todos os IDs de responsáveis sejam inteiros\r\n            : [parseInt(responsaveis)], // Se não for array, transforma em um array com o ID único\r\n        validade, // A data permanece como está (no formato ISO)\r\n        status: String(status).trim() // Garantir que status seja string sem espaços extras\r\n    };\r\n\r\n    // Verifica se todos os campos necessários estão válidos\r\n    if (isNaN(dadosAtualizados.demandante)) {\r\n        console.error(\"O campo 'demandante' deve ser um número válido.\");\r\n        return;\r\n    }\r\n\r\n    if (dadosAtualizados.responsaveis.some(id => isNaN(id))) {\r\n        console.error(\"Algum 'responsável' possui um ID inválido.\");\r\n        return;\r\n    }\r\n\r\n    // Envia a requisição para editar a atividade\r\n    try {\r\n        console.log(\"Payload enviado:\", dadosAtualizados);\r\n\r\n        const response = await axios.put(\r\n            `http://localhost:8000/api/atividades/${atividadeId}/editar/`,\r\n            dadosAtualizados,\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                }\r\n            }\r\n        );\r\n\r\n        console.log(\"Atividade editada com sucesso:\", response.data);\r\n    } catch (error) {\r\n        console.error(\"Erro ao editar atividade:\", error);\r\n\r\n        // Verifica se a resposta de erro contém dados\r\n        if (error.response && error.response.data) {\r\n            console.error(\"Detalhes do erro:\", error.response.data);\r\n        } else {\r\n            console.error(\"Erro desconhecido:\", error.message);\r\n        }\r\n    }\r\n};\r\n\r\nexport default EditarAtividade;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOC,WAAW,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,MAAM,KAAK;EACjH;EACA,IAAI,CAACN,WAAW,EAAE;IACdO,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C;EACJ;;EAEA;EACA,IAAI,CAACP,MAAM,IAAI,CAACC,SAAS,IAAI,CAACG,QAAQ,IAAI,CAACC,MAAM,EAAE;IAC/CC,OAAO,CAACE,KAAK,CAAC,qCAAqC,CAAC;IACpD;EACJ;;EAEA;EACA,MAAMC,YAAY,GAAG,CAACC,KAAK,CAACC,IAAI,CAACC,KAAK,CAACR,QAAQ,CAAC,CAAC;EACjD,IAAI,CAACK,YAAY,EAAE;IACfH,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEJ,QAAQ,CAAC;IACrD;EACJ;;EAEA;EACA,MAAMS,gBAAgB,GAAG;IACrBb,MAAM,EAAEc,MAAM,CAACd,MAAM,CAAC,CAACe,IAAI,CAAC,CAAC;IAC7Bd,SAAS,EAAEa,MAAM,CAACb,SAAS,CAAC,CAACc,IAAI,CAAC,CAAC;IACnCb,UAAU,EAAEc,QAAQ,CAACd,UAAU,CAAC;IAAE;IAClCC,YAAY,EAAEc,KAAK,CAACC,OAAO,CAACf,YAAY,CAAC,GACnCA,YAAY,CAACgB,GAAG,CAACC,EAAE,IAAIJ,QAAQ,CAACI,EAAE,CAAC,CAAC,CAAC;IAAA,EACrC,CAACJ,QAAQ,CAACb,YAAY,CAAC,CAAC;IAAE;IAChCC,QAAQ;IAAE;IACVC,MAAM,EAAES,MAAM,CAACT,MAAM,CAAC,CAACU,IAAI,CAAC,CAAC,CAAC;EAClC,CAAC;;EAED;EACA,IAAIL,KAAK,CAACG,gBAAgB,CAACX,UAAU,CAAC,EAAE;IACpCI,OAAO,CAACE,KAAK,CAAC,iDAAiD,CAAC;IAChE;EACJ;EAEA,IAAIK,gBAAgB,CAACV,YAAY,CAACkB,IAAI,CAACD,EAAE,IAAIV,KAAK,CAACU,EAAE,CAAC,CAAC,EAAE;IACrDd,OAAO,CAACE,KAAK,CAAC,4CAA4C,CAAC;IAC3D;EACJ;;EAEA;EACA,IAAI;IACAF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEM,gBAAgB,CAAC;IAEjD,MAAMS,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAC5B,wCAAwCxB,WAAW,UAAU,EAC7Dc,gBAAgB,EAChB;MACIW,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;IAEDlB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEe,QAAQ,CAACG,IAAI,CAAC;EAChE,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;;IAEjD;IACA,IAAIA,KAAK,CAACc,QAAQ,IAAId,KAAK,CAACc,QAAQ,CAACG,IAAI,EAAE;MACvCnB,OAAO,CAACE,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACc,QAAQ,CAACG,IAAI,CAAC;IAC3D,CAAC,MAAM;MACHnB,OAAO,CAACE,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACkB,OAAO,CAAC;IACtD;EACJ;AACJ,CAAC;AAACC,EAAA,GApEW7B,eAAe;AAsE5B,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}